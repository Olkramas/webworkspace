프라이머리키는 문자, 숫자, 날짜를 섞어서 만드는 경우가 많음 ex) Yd2411150001

express는 구조가 정해진게 없음 대표적으로 vue가 틀이 정해져있음
그래서 폴더를 만들어서 구조를 정해줘야함

sql파일 같은 경우에는 테이블별로 분리해줘야함(이건 회사마다 다름, 회사 내부에서 프로젝트 구조가 어떻게 돼있는지 참고해야함)

깃허브에 올리는 파일에서 ip나 db정보를 올리지 않음(할일 없는 해커들이 많음)
env파일로 빼서 저장


/*프로젝트 만들기*/
npm install express

npm install mysql

npm install nodemon --save-dev  //배포할때는 서버가 꺼졌다 켜지지 않게 개발할 때만 사용하도록 설정
    "dev" : "nodemon app.js" 등록

npm install dotenv


/* mapper 부분 참고하기 */
let obj = { "id" : "Hong", "age" : 1234, "first_name" : "Han};
obj["id"];  -> obj.id .으로 앞의 방식을 생락하게 됨
obj["first_name"];

slqList[alias];
{
  select : '',
  insert : '',...
}

slqList.alias; => 서로 전혀 다른 결과임 sqlList["alias"]의 형태임
{
  alias : '';
}
.으로 필드를 지정할 때는 문자열로 필드를 찾는다는점을 기억하기


<user-server>
client -> app.js -> router.* -> service.* -> mapper.js(서비스로 부터 받은 쿼리문으로 db에 검색) -> database 
의 형식으로 폴더를 만들고 해당기능을 가져오려고 함

자바가 아니라서 자바스크립트는 모든 기능을하나의 파일로 진행할 수 있지만,
협업을 했을 때 같은 파일에 여러작업을 하게되면 충돌이 일어남.
이를 방지하기 위해서 모든 기능들을 나눠야 함.


const connectionPool = mysql.createPool({
  host: process.env.MYSQL_HOST,
  port: process.env.MYSQL_PORT,
  user: process.env.MYSQL_USER,
  password: process.env.MYSQL_PWD,
  database: process.env.MYSQL_DB,    
  connectionLimit: process.env.MYSQL_LIMIT,
  debug: true
});
debug모드를 활성화 하면 콘솔에 어떤 값이 쿼리문에서 실제 적용되는지 확인할 수 있음

ex) --> (61) ComQueryPacket {
  command: 3,
  sql: "DELETE FROM t_users\n WHERE  user_no = '3'"
}

